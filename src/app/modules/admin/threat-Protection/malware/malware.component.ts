import { ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';
import { FuseAlertType } from '@fuse/components/alert';
import { NicService } from 'app/api/nic-info.service';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Component({
    selector: 'app-malware',
    templateUrl: './malware.component.html',
    styleUrls: ['./malware.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class MalwareComponent implements OnInit {

    maliciousFileList:any;
    alert: { type: FuseAlertType; message: string } = {type   : 'success',message: ''};
    showAlert: boolean = false;
    loading: boolean = false;
    storedDefCount:any=0;
    LastUpdatedDefCount:any=0;
    activeCount:any=0;
    inactiveCount:any=0;

    headerMapping: { [key: string]: string } = {
        ip: 'IP',
        status: 'Status',
        malware_action: 'Action'
    };

    displayedColumns: string[] = [
        'ip','status','malware_action'
    ];

    blockedIps: any[] = [];

    constructor( private apiService: NicService ,private cdr: ChangeDetectorRef) 
    { 
        this.maliciousFileList = "list";
        
        this.getMaliciousFileList();
        
    }

    

    showTimedAlert(type: FuseAlertType, message: string) {
        this.alert.type = type;
        this.alert.message = message;
        this.showAlert = true;
    
        // Automatically hide the alert after 5 seconds
        setTimeout(() => {
          this.showAlert = false;
        }, 2000);
    }

    getMaliciousFileList(): void {
        this.loading = true;
        this.apiService.getMalwareListData()
            .pipe(
                catchError(error => {
                    this.showTimedAlert("error", "Error Fetching Data")
                    this.loading = false;
            return of({ api_status: 'error', message: 'Failed to fetch data' }); 
                })
            )
            .subscribe(response => 
            {
                this.showAlert = false;
                if (response.api_status === 'success') 
                {
                    this.loading = false;
                    this.blockedIps = response.blockedIps;
                    this.storedDefCount = response.entries;
                    this.activeCount = response.uncommentedCount;
                    this.inactiveCount = response.commentedCount;
                    //this.LastUpdatedDefCount = this.storedDefCount;
                    this.showTimedAlert("success", "Updated Successfully")
                } 
                else 
                {
                    this.showTimedAlert("error", response.message || "Unknown error")
                    this.loading = false;
                }
                
            });
        //this.cdr.detectChanges(); 
        //this.loading = false;
    }

    updateDB(): void{
        this.loading = true;
        this.apiService.UpdateMalwareData()
            .pipe(
                catchError(error => {
                    this.showTimedAlert("error", "Error Fetching Data")
                    this.loading = false;
            return of({ api_status: 'error', message: 'Failed to fetch data' }); 
                })
            )
            .subscribe(response => 
            {
                this.showAlert = false;
                if (response.api_status === 'success') 
                {
                    this.loading = false;
                    let match = response.output.match(/Entries:\s*(\d+)/);
                    if (match) {
                        this.LastUpdatedDefCount = parseInt(match[1], 10)-1; // 19847 will be extracted
                    }
                    this.showTimedAlert("success", response.output)
                } 
                else 
                {
                    this.showTimedAlert("error", response.message || "Unknown error")
                    this.loading = false;
                }
                
            });
    }

    onEditRow(row: any): void {
        console.log('Editing Row:', row);  // Log row for debugging
        if (row.sep === "malware-toggle-change") {
            if (row.status == 'active') {
                console.log('Changing status to Inactive',row.ip, row.status);
                this.updateStatus(row.ip, 'inactive');
            } else {
                console.log('Changing status to Active',row.ip, row.status);
                this.updateStatus(row.ip, 'active');
            }
        }
    }
    

    updateStatus(ip: string, status: string) {
        this.loading = true;
        this.apiService.updateMalwareIPStatus(ip, status)
            .pipe(
                catchError(error => {
                    console.error('API error:', error);  // Log the error
                    this.showTimedAlert("error", "Error Fetching Data");
                    this.loading = false;
                    return of({ api_status: 'error', message: 'Failed to fetch data' });
                })
            )
            .subscribe(response => {
                console.log('API Response:', response);  // Log the response for debugging
                this.showAlert = false;
                if (response.api_status === 'success') {
                    this.loading = false;
                    this.showTimedAlert("success", "Updated Successfully");
                    this.getMaliciousFileList();
                } else {
                    this.showTimedAlert("error", response.message || "Unknown error");
                    this.loading = false;
                }
            });
        
    }

    ngOnInit(): void {
    }

    toggleChanged(event: any) {
        console.log('Checked:', event.checked);
       
    }

}
